#!/usr/bin/env bash

set -eo pipefail

# Navigate to the dev directory (where this script lives) to ensure we can run this script
# from anywhere.
cd "$(dirname "$0")"

# CC servers can't find it for some reason.  Local shellcheck is fine.
# shellcheck disable=SC1091
source "../ci/keycloak/keycloak_functions.sh"

# TODO: add a prompt and an -f flag to give the user control over destroying an already existing development environment.
# It can be such a pain to mistakenly destroy your environment.

ENABLE_OIDC_KEYCLOAK=false
ENABLE_OIDC_OKTA=false
ENABLE_OIDC_IDENTITY=false
export IDENTITY_USERNAME=""

# Minimal set of services.  We add to this list based on cmd line flags.
services=(pg conjur proxy cli-dev)

default_authenticators="authn"
enabled_authenticators="$default_authenticators"

main() {
  parse_options "$@"

  if docker-compose ps conjur | grep conjur >/dev/null 2>&1; then
    ./stop
  fi

  local conjur_account=dev
  local admin_initial_password='SuperSecret!!!!123'
  local path_to_admin_initial_password=tmp/admin_initial_password

  # Prepare tmp files
  echo
  echo "Preparing dev/tmp files"
  mkdir -p ./tmp
  touch ./tmp/.bashrc
  cat <<EOL > ./tmp/.bashrc
echo "Invoke dev_help to find out about the dev utilities available within this shell" >&2

function dev_help() {
  echo "
Available dev utilities
-----------------------

make: Make can be executed against the Makefile in the root directory of the repository.

      Available tasks are: run, build, install, test, integration.

admin_initial_password: Prints the initially-set password of the Conjur admin

admin_api_key: Prints the API key of the Conjur admin
"
}

function admin_initial_password() {
  cat ${PWD}/${path_to_admin_initial_password}
}

function admin_api_key() {
  curl -s 'http://conjur/dev?action=retrieve_api_key&role_id=dev:user:admin'
}

export -f admin_api_key
export -f admin_initial_password
EOL

  echo
  echo "Starting Containers"
  docker-compose up -d --no-deps "${services[@]}"

  echo
  docker-compose exec -T pg bash -e <<EOL
echo 'Waiting for Postgres to be ready...'
for i in {1..90}
do
  pg_isready -U postgres 2>&1 > /dev/null && echo ' Postgres is ready!' && exit 0;
  printf '.'
  sleep 1
done

echo 'Postgres is not ready after 90 seconds'
exit 1
EOL

  echo
  wait_for_conjur

  echo
  echo 'Setting up Conjur...'
  docker-compose exec -T conjur bundle exec rake "account:create_with_password[${conjur_account},${admin_initial_password}]"
  echo 'Finished setting up Conjur'

  echo
  echo "Admin password: ${admin_initial_password}"
  echo "${admin_initial_password}" | tr -d '\r\n' > "${path_to_admin_initial_password}"
  echo "Wrote admin password to dev/${path_to_admin_initial_password}"

  # Even when using OIDC, we need to set up conjur with the regular authenticator
  # so we can set up policy before dropping the user into the CLI container.
  docker-compose exec cli-dev ./dev/refresh-admin-connection-details

  echo
  echo "Loading policy"

  docker-compose exec -T conjur conjurctl policy load dev /dev/stdin < policy.yml

  echo
  echo "Setting up authenticators"

  configure_oidc_providers

  # Updates CONJUR_AUTHENTICATORS and restarts required services.
  start_auth_services
  
  echo
  echo "Entering CLI container"

  docker-compose exec cli-dev go mod download || true

  echo
  if [ "$ENABLE_OIDC_OKTA" = true ]; then
    echo "Setting up Conjur for OIDC (Okta)"
    docker-compose exec cli-dev bash -c 'conjur logout
conjur init --force-netrc --force -u http://conjur -i -a dev -t oidc --service-id okta
conjur login -i $OKTA_USERNAME -p $OKTA_PASSWORD'
  elif [ "$ENABLE_OIDC_KEYCLOAK" = true ]; then
    echo "Setting up Conjur for OIDC (Keycloak)"
    docker-compose exec cli-dev bash -c 'conjur logout
conjur init --force-netrc --force -u http://conjur -i -a dev -t oidc --service-id keycloak
conjur login -i alice -p alice'
  elif [ "$ENABLE_OIDC_IDENTITY" = true ]; then
    echo "Setting up Conjur for OIDC (Identity)"
    docker-compose exec cli-dev bash -c 'conjur logout
conjur init --force-netrc --force -u http://conjur -i -a dev -t oidc --service-id identity
conjur login -i $IDENTITY_USERNAME'
  fi

  echo
  docker-compose exec cli-dev bash
}

parse_options() {
  while true ; do
    case "$1" in
      --oidc-keycloak ) ENABLE_OIDC_KEYCLOAK=true ; shift ;;
      --oidc-okta ) ENABLE_OIDC_OKTA=true ; shift ;;
      --oidc-identity ) ENABLE_OIDC_IDENTITY=true ; shift ;;
      --identity-user ) IDENTITY_USERNAME="$2" ; shift ; shift ;;
      # -h | --help ) print_help ; shift ;;
       * )
         if [ -z "$1" ]; then
           break
         else
           echo "$1 is not a valid option"
           exit 1
         fi ;;
    esac
  done

  if [[ $ENABLE_OIDC_IDENTITY = true && -z "$IDENTITY_USERNAME" ]]; then
    echo "Flag --oidc-identity must be paired with flag --identity-user. See --help."
    exit
  fi
}

start_conjur_server() {
  echo "Starting Conjur server"
  docker-compose exec -d conjur conjurctl server

  echo 'Checking if Conjur server is ready'
  wait_for_conjur
}

wait_for_conjur() {
  docker-compose exec conjur conjurctl wait
}

client_load_policy() {
  local policy_file=$1

  docker-compose exec -T cli-dev conjur policy load -b root -f - < "$policy_file"
}

client_add_secret() {
  local variable=$1
  local value=$2

  docker-compose exec cli-dev conjur variable set -i "$variable" -v "$value"
}

configure_oidc_providers() {
  # Start conjur again, since it is recreating by docker-compose because of
  # dependency with keycloak
  if [[ $ENABLE_OIDC_KEYCLOAK = true ]]; then
    echo "Configuring Keycloak provider"
    setup_keycloak
  fi

  if [[ $ENABLE_OIDC_OKTA = true ]]; then
    echo "Configuring Okta provider"
    setup_okta
  fi

  if [[ $ENABLE_OIDC_IDENTITY = true ]]; then
    echo "Configuring Identity provider"
    setup_identity
  fi

  enable_oidc_authenticators
}

setup_keycloak() {
  services+=(keycloak)
  docker-compose up -d --no-deps "${services[@]}"
  start_conjur_server
  wait_for_keycloak_server
  fetch_keycloak_certificate
  setup_oidc_client "keycloak" "https://keycloak:8443/auth/realms/master" "conjurClient" "1234" "email"
  create_keycloak_users
  echo "keycloak admin console url: http://0.0.0.0:7777/auth/admin"
}

setup_okta() {
  check_environment_variables "OKTA_PROVIDER_URI" "OKTA_CLIENT_ID" "OKTA_CLIENT_SECRET"
  setup_oidc_client "okta-2" "${OKTA_PROVIDER_URI}oauth2/default" \
                    "${OKTA_CLIENT_ID}" "${OKTA_CLIENT_SECRET}" "preferred_username"
}

setup_identity() {
  check_environment_variables "IDENTITY_PROVIDER_URI" "IDENTITY_CLIENT_ID" "IDENTITY_CLIENT_SECRET"
  generate_identity_policy
  setup_oidc_client "identity" "${IDENTITY_PROVIDER_URI}" \
                    "${IDENTITY_CLIENT_ID}" "${IDENTITY_CLIENT_SECRET}" "email"
}

setup_oidc_client() {
  service_id="$1"
  provider_uri="$2"
  client_id="$3"
  client_secret="$4"
  claim_mapping="$5"

  trim_service_id="${service_id%-*}"
  echo "Setting $service_id policy and variable values in Conjur"

  client_load_policy "../ci/$trim_service_id/policy.yml"

  client_add_secret "conjur/authn-oidc/$service_id/provider-uri" "$provider_uri"
  client_add_secret "conjur/authn-oidc/$service_id/client-id" "$client_id"
  client_add_secret "conjur/authn-oidc/$service_id/client-secret" "$client_secret"
  client_add_secret "conjur/authn-oidc/$service_id/claim-mapping" "$claim_mapping"
  client_add_secret "conjur/authn-oidc/$service_id/redirect_uri" "http://127.0.0.1:8888/callback"

  client_load_policy "../ci/$trim_service_id/users.yml"
}

function generate_identity_policy() {
  echo "Generating policy for AuthnOIDC V2 service 'identity' and user '$IDENTITY_USERNAME'"
  policy_dir="../ci/identity"
  rm -f "$policy_dir/users.yml"
  sed -e "s#{{ .IDENTITY_USERNAME }}#$IDENTITY_USERNAME#g" "$policy_dir/users.template.yml" > "$policy_dir/users.yml"
}

check_environment_variables() {
  vars=("$@")
  local valid=true
  for i in "${vars[@]}"
  do
    if [[ -z "${!i}" ]]; then
      echo "${i} is not set"
      valid=false
    fi
  done

  if [[ $valid = false ]]; then
    exit 1
  fi
}

enable_oidc_authenticators() {
  if [[ $ENABLE_OIDC_KEYCLOAK = true ]]; then
    echo "Configuring Keycloak as OpenID provider for automatic testing"
    # We enable an OIDC authenticator without a service-id to test that it's
    # invalid.
    enabled_authenticators="$enabled_authenticators,authn-oidc/keycloak"
  fi

  if [[ $ENABLE_OIDC_OKTA = true ]]; then
    echo "Configuring OKTA as OpenID provider for manual testing"
    enabled_authenticators="$enabled_authenticators,authn-oidc/okta"
  fi

  if [[ $ENABLE_OIDC_IDENTITY = true ]]; then
    echo "Configuring Identity as OpenID provider for manual testing"
    enabled_authenticators="$enabled_authenticators,authn-oidc/identity"
  fi
}

start_auth_services() {
  echo "Setting CONJUR_AUTHENTICATORS to: $enabled_authenticators"
  env_args+=(-e "CONJUR_AUTHENTICATORS=$enabled_authenticators")

  # Will restart services if configuration has changed.  I think this happens
  # when additional authenticators are enabled.
  docker-compose up -d --no-deps "${services[@]}"

  # If that happens, we need to restart Conjur server.
  if [[ "$enabled_authenticators" != "$default_authenticators" ]]; then
    start_conjur_server
  fi
}

main "$@"
