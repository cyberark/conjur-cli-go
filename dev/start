#!/usr/bin/env bash

set -xeo pipefail

# CC servers can't find it for some reason.  Local shellcheck is fine.
# shellcheck disable=SC1091
source "./keycloak/keycloak_functions.sh"

# Navigate to the dev directory (where this script lives) to ensure we can run this script
# from anywhere.
cd "$(dirname "$0")"

# TODO: add a prompt and an -f flag to give the user control over destroying an already existing development environment.
# It can be such a pain to mistakenly destroy your environment.

ENABLE_AUTHN_OIDC=false
ENABLE_OIDC_OKTA=false

# Minimal set of services.  We add to this list based on cmd line flags.
services=(pg conjur cli-dev)

default_authenticators="authn"
enabled_authenticators="$default_authenticators"

main() {
  parse_options "$@"

  if docker-compose ps conjur | grep conjur >/dev/null 2>&1; then
    ./stop
  fi

  local conjur_account=dev
  local admin_initial_password='SuperSecret!!!!123'
  local path_to_admin_initial_password=tmp/admin_initial_password

  # Prepare tmp files
  echo
  echo "Preparing dev/tmp files"
  mkdir -p ./tmp
  touch ./tmp/.bashrc
  cat <<EOL > ./tmp/.bashrc
echo "Invoke dev_help to find out about the dev utilities available within this shell" >&2

function dev_help() {
  echo "
Available dev utilities
-----------------------

make: Make can be executed against the Makefile in the root directory of the repository.

      Available tasks are: run, build, install, test, integration.

admin_initial_password: Prints the initially-set password of the Conjur admin

admin_api_key: Prints the API key of the Conjur admin
"
}

function admin_initial_password() {
  cat ${PWD}/${path_to_admin_initial_password}
}

function admin_api_key() {
  curl -s 'http://conjur/dev?action=retrieve_api_key&role_id=dev:user:admin'
}

export -f admin_api_key
export -f admin_initial_password
EOL

  echo
  echo "Starting Containers"
  docker-compose up -d --no-deps "${services[@]}"

  echo
  docker-compose exec -T pg bash -e <<EOL
echo 'Waiting for Postgres to be ready...'
for i in {1..90}
do
  pg_isready -U postgres 2>&1 > /dev/null && echo ' Postgres is ready!' && exit 0;
  printf '.'
  sleep 1
done

echo 'Postgres is not ready after 90 seconds'
exit 1
EOL

  echo
  wait_for_conjur

  echo
  echo 'Setting up Conjur...'
  docker-compose exec -T conjur bundle exec rake "account:create_with_password[${conjur_account},${admin_initial_password}]"
  echo 'Finished setting up Conjur'

  echo
  echo "Admin password: ${admin_initial_password}"
  echo "${admin_initial_password}" | tr -d '\r\n' > "${path_to_admin_initial_password}"
  echo "Wrote admin password to dev/${path_to_admin_initial_password}"

  # Even when using OIDC, we need to set up conjur with the regular authenticator
  # so we can set up policy before dropping the user into the CLI container.
  docker-compose exec cli-dev ./dev/refresh-admin-connection-details

  echo
  echo "Loading policy"

  docker-compose exec -T conjur conjurctl policy load dev /dev/stdin < policy.yml

  echo
  echo "Setting up authenticators"

  init_oidc

  # Updates CONJUR_AUTHENTICATORS and restarts required services.
  start_auth_services
  
  echo
  echo "Entering CLI container"

  docker-compose exec cli-dev go mod download || true

  echo
  if [ "$ENABLE_AUTHN_OIDC" = true ]; then
    echo "Setting up Conjur for OIDC"
    docker-compose exec cli-dev bash -c 'conjur logout
conjur init --force -u http://conjur -a dev -t oidc --service-id keycloak
conjur login -u alice -p alice'
  fi

  echo
  docker-compose exec cli-dev bash
}

parse_options() {
  while true ; do
    case "$1" in
      --authn-oidc ) ENABLE_AUTHN_OIDC=true ; shift ;;
      --oidc-okta ) ENABLE_OIDC_OKTA=true ; shift ;;
      # -h | --help ) print_help ; shift ;;
       * )
         if [ -z "$1" ]; then
           break
         else
           echo "$1 is not a valid option"
           exit 1
         fi ;;
    esac
  done
}

start_conjur_server() {
  echo "Starting Conjur server"
  docker-compose exec -d conjur conjurctl server

  echo 'Checking if Conjur server is ready'
  wait_for_conjur
}

wait_for_conjur() {
  docker-compose exec conjur conjurctl wait
}

client_load_policy() {
  local policy_file=$1

  docker-compose exec -T cli-dev conjur policy load -b root -f - < "$policy_file"
}

client_add_secret() {
  local variable=$1
  local value=$2

  docker-compose exec cli-dev conjur variable set -i "$variable" -v "$value"
}

configure_oidc_providers() {
  # Start conjur again, since it is recreating by docker-compose because of
  # dependency with keycloak
  start_conjur_server
  wait_for_keycloak_server
  fetch_keycloak_certificate
  configure_oidc_authenticators
  enable_oidc_authenticators
  create_keycloak_users
  echo "keycloak admin console url: http://0.0.0.0:7777/auth/admin"
}

configure_oidc_authenticators() {
  # add variables' values for keycloak
  echo "Setting keycloak variables values in conjur"

    client_load_policy "keycloak/policy.yml"

    client_add_secret 'conjur/authn-oidc/keycloak/provider-uri' 'https://keycloak:8443/auth/realms/master'
    client_add_secret 'conjur/authn-oidc/keycloak/client-id' 'conjurClient'
    client_add_secret 'conjur/authn-oidc/keycloak/client-secret' '1234'
    client_add_secret 'conjur/authn-oidc/keycloak/claim-mapping' 'email'
    client_add_secret 'conjur/authn-oidc/keycloak/nonce' 'af88d8f8ff6631fb4cf0'
    client_add_secret 'conjur/authn-oidc/keycloak/state' 'd38e57e0fd47ccffa9c2'
    client_add_secret 'conjur/authn-oidc/keycloak/redirect_uri' 'http://localhost:8888/callback'

    client_load_policy "keycloak/users.yml"



  if [[ $ENABLE_OIDC_OKTA = true ]]; then
    client_load_policy "okta/okta-2.yml"

    client_add_secret 'conjur/authn-oidc/okta-2/provider-uri' 'https://dev-92899796.okta.com/oauth2/default'
    client_add_secret 'conjur/authn-oidc/okta-2/client-id' '0oa3w3xig6rHiu9yT5d7'
    client_add_secret 'conjur/authn-oidc/okta-2/client-secret' 'e349BMTTIpLO-rPuPqLLkLyH_pO-loUzhIVJCrHj'
    client_add_secret 'conjur/authn-oidc/okta-2/claim-mapping' 'preferred_username'
    client_add_secret 'conjur/authn-oidc/okta-2/nonce' '1656b4264b60af659fce'
    client_add_secret 'conjur/authn-oidc/okta-2/state' '4f413476ef7e2395f0af'
    client_add_secret 'conjur/authn-oidc/okta-2/redirect_uri' 'http://localhost:8888/callback'

    client_load_policy "okta/okta-users.yml"
  fi
}

enable_oidc_authenticators() {
  echo "Configuring Keycloak as OpenID provider for automatic testing"
  # We enable an OIDC authenticator without a service-id to test that it's
  # invalid.
  enabled_authenticators="$enabled_authenticators,authn-oidc/keycloak"

  if [[ $ENABLE_OIDC_OKTA = true ]]; then
    echo "Configuring OKTA as OpenID provider for manual testing"
    enabled_authenticators="$enabled_authenticators,authn-oidc/okta-2"
  fi
}

init_oidc() {
  # # ADFS and OKTA make no sense without OIDC.
  # if [[ $ENABLE_AUTHN_OIDC = false &&
  #   ($ENABLE_OIDC_ADFS = true || $ENABLE_OIDC_OKTA = true) ]]
  # then
  #   echo "Error: --oidc-adfs and --oidc-okta both require --authn-oidc"
  #   exit 1
  # fi

  if [[ $ENABLE_AUTHN_OIDC != true ]]; then
    return
  fi

  services+=(keycloak)
  docker-compose up -d --no-deps "${services[@]}"

  configure_oidc_providers
}

start_auth_services() {
  echo "Setting CONJUR_AUTHENTICATORS to: $enabled_authenticators"
  env_args+=(-e "CONJUR_AUTHENTICATORS=$enabled_authenticators")

  # Will restart services if configuration has changed.  I think this happens
  # when additional authenticators are enabled.
  docker-compose up -d --no-deps "${services[@]}"

  # If that happens, we need to restart Conjur server.
  if [[ "$enabled_authenticators" != "$default_authenticators" ]]; then
    start_conjur_server
  fi
}

main "$@"
